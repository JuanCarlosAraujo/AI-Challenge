# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'InterfazGraficaPythonProyectoIA.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import matplotlib.pyplot as plt
import os

os.environ['PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION'] = 'python'


from PyQt5.QtGui import QImage, QPixmap
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import  QFileDialog
from PyQt5.QtWidgets import QMessageBox
import cv2
import tensorflow as tf
import Prediction
from keras.preprocessing.image import ImageDataGenerator



class Ui_Dialog(object):
    dir=QFileDialog
    validacionCamara = 0
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1099, 722)
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(60, 70, 371, 120))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setStyleSheet(button_style)
        
        self.pushButton_Salir = QtWidgets.QPushButton(Dialog)
        self.pushButton_Salir.setGeometry(QtCore.QRect(880, 20, 171, 41))
        self.pushButton_Salir.setObjectName("pushButton_Salir")
        self.pushButton_Salir.setStyleSheet(button_style)

        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setEnabled(False)
        self.pushButton_2.setGeometry(QtCore.QRect(700, 20, 171, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setStyleSheet(button_style)

        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(450, 70, 601, 601))
        self.label.setStyleSheet("background-color:rgb(255,255,255);")
        self.label.setText("")
        self.label.setObjectName("label")

        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(60, 120, 81, 16))
        self.label_3.setObjectName("label_3")

        self.label_enojado = QtWidgets.QLabel(Dialog)
        self.label_enojado.setGeometry(QtCore.QRect(60, 210, 111, 101))
        self.label_enojado.setText("")
        self.label_enojado.setObjectName("label_enojado")

        self.label_disgustado = QtWidgets.QLabel(Dialog)
        self.label_disgustado.setGeometry(QtCore.QRect(190, 210, 111, 101))
        self.label_disgustado.setText("")
        self.label_disgustado.setObjectName("label_disgustado")

        self.label_fear = QtWidgets.QLabel(Dialog)
        self.label_fear.setGeometry(QtCore.QRect(320, 210, 111, 101))
        self.label_fear.setText("")
        self.label_fear.setObjectName("label_fear")

        self.label_happy = QtWidgets.QLabel(Dialog)
        self.label_happy.setGeometry(QtCore.QRect(60, 330, 111, 101))
        self.label_happy.setText("")
        self.label_happy.setObjectName("label_happy")

        self.label_neutral = QtWidgets.QLabel(Dialog)
        self.label_neutral.setGeometry(QtCore.QRect(190, 330, 111, 101))
        self.label_neutral.setText("")
        self.label_neutral.setObjectName("label_neutral")

        self.label_sad = QtWidgets.QLabel(Dialog)
        self.label_sad.setGeometry(QtCore.QRect(320, 330, 111, 101))
        self.label_sad.setText("")
        self.label_sad.setObjectName("label_sad")

        self.label_surprise = QtWidgets.QLabel(Dialog)
        self.label_surprise.setGeometry(QtCore.QRect(190, 450, 111, 101))
        self.label_surprise.setText("")
        self.label_surprise.setObjectName("label_surprise")

        self.label_logo = QtWidgets.QLabel(Dialog)
        self.label_logo.setGeometry(QtCore.QRect(20, 570, 131, 131))
        self.label_logo.setText("")
        self.label_logo.setObjectName("label_logo")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Reconocimiento de gestos faciales en tiempo real"))
        self.pushButton.setText(_translate("Dialog", "Cargar Modelo"))
        self.pushButton_Salir.setText(_translate("Dialog", "Cerrar Camara"))
        self.pushButton_2.setText(_translate("Dialog", "Ejecutar Modelo"))

        loaded_model = tf.keras.models
        self.cargarImagenes()
        self.ImagenEspera()
        self.pushButton.clicked.connect (self.CargarModelo)
        self.pushButton_2.clicked.connect (self.EjecutarModelo)
        self.pushButton_Salir.clicked.connect(self.CerrarCamara)


    def cargarImagenes(self):
        
        pixmapEnojado = QPixmap(r".\IMG\Enojo.png")
        self.label_enojado.setPixmap(pixmapEnojado.scaled(self.label_enojado.size(), aspectRatioMode=True))
        pixmapDisgustado = QPixmap(r".\IMG\Disgustado.png")
        self.label_disgustado.setPixmap(pixmapDisgustado.scaled(self.label_enojado.size(), aspectRatioMode=True))
        pixmapAsustado = QPixmap(r".\IMG\Asustado.png")
        self.label_fear.setPixmap(pixmapAsustado.scaled(self.label_enojado.size(), aspectRatioMode=True))
        pixmapFeliz = QPixmap(r".\IMG\Feliz.png")
        self.label_happy.setPixmap(pixmapFeliz.scaled(self.label_enojado.size(), aspectRatioMode=True))
        pixmapNeutral = QPixmap(r".\IMG\Neutral.png")
        self.label_neutral.setPixmap(pixmapNeutral.scaled(self.label_enojado.size(), aspectRatioMode=True))
        pixmapTristesa= QPixmap(r".\IMG\Tristeza.png")
        self.label_sad.setPixmap(pixmapTristesa.scaled(self.label_enojado.size(), aspectRatioMode=True))
        pixmapSorpresa = QPixmap(r".\IMG\Sorprendido.png")
        self.label_surprise.setPixmap(pixmapSorpresa.scaled(self.label_enojado.size(), aspectRatioMode=True))



    def ImagenEspera(self):
        width = 640
        height = 512
        pixmap = QPixmap("./IMG/Esperando.jpeg")
        scaled_pixmap = pixmap.scaled(width, height)
        self.label.setPixmap(scaled_pixmap)

    def EjecutarModelo(self):
        self.EjecutarPrediccion(self.loaded_model)


    def CargarModelo(self):
        try:
            model_path = file_picker()
            self.loaded_model = tf.keras.models.load_model(model_path)
            ui.pushButton_2.setEnabled(True)
            self.loaded_model
        except FileNotFoundError:
            self.EmitirMensaje("El archivo seleccionado no se encontró.")
        except tf.errors.InvalidArgumentError:
            self.EmitirMensaje("Error al cargar el modelo. Asegúrate de que el archivo seleccionado sea un modelo válido.")
        except Exception as e:
            text = "Ocurrió un error inesperado: " + str(e)
            self.EmitirMensaje(text)

    def SeleccionarArchivo(self):
        try:
            self.dir = QFileDialog.getExistingDirectory(None, "Seleccionar carpeta")
        except FileNotFoundError:
            self.EmitirMensaje("El archivo seleccionado no se encontró.")
        except Exception as e:
            self.EmitirMensaje("Ocurrió un error inesperado:", str(e))
        

    def EmitirMensaje(self,e):
        msg = QMessageBox()
        msg.setWindowTitle("¡ERROR!")
        msg.setText(e)
        msg.setStandardButtons(QMessageBox.Cancel)
        x = msg.exec_()

    def EjecutarPrediccion(self,model):
        
        dataPath = './Reconocimiento Facial/Data'
        imagePaths = os.listdir(dataPath)
        print('imagePaths=',imagePaths)
        face_recognizer = cv2.face.LBPHFaceRecognizer_create()
        face_recognizer.read('face.xml')
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            print("No se pudo abrir la cámara.")
            exit()
        cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 640)
        face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
        while True:
            ret, frame = cap.read()
            if ret:
                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                auxFrame = gray.copy()
                    # Detecta caras en el frame
                faces = face_cascade.detectMultiScale(gray,scaleFactor=1.3, minNeighbors=5, minSize=(30, 30))

                for (x, y, w, h) in faces:

                    cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
                    roi = auxFrame[y:y+h, x:x+w]
                    rostro = cv2.resize(roi,(150,150),interpolation= cv2.INTER_CUBIC)
                    result = face_recognizer.predict(rostro)
                    prediccion = Prediction.predictions(roi,model)
                    cv2.putText(frame, prediccion, (x, y+h+20), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                    
                    if result[1] < 70:
                        cv2.putText(frame,'{}'.format(imagePaths[result[0]]),(x,y-25),2,1.1,(0,255,0),1,cv2.LINE_AA)
                    else:
                        cv2.putText(frame,'Desconocido',(x,y-20),2,0.8,(0,0,255),1,cv2.LINE_AA)

                #cv2.imshow('Video', frame)
                altura, ancho, canales = frame.shape
                bytes_por_linea = canales * ancho
                image = QImage(frame.data, ancho, altura, bytes_por_linea, QImage.Format_BGR888)
                pixmap = QPixmap.fromImage(image)
                self.label.setPixmap(pixmap)
                if cv2.waitKey(1) & 0xFF == ord('q') or self.validacionCamara == 1:
                    self.ImagenEspera()
                    self.validacionCamara = 0
                    break
            else:
                break

        cap.release()
        cv2.destroyAllWindows()

    def CerrarCamara(self):
        self.validacionCamara = 1





    
def file_picker():
    options = QFileDialog.Options()
    options |= QFileDialog.DontUseNativeDialog  # Deshabilita el diálogo nativo del sistema operativo
    filename, _ = QFileDialog.getOpenFileName(None, "Seleccionar archivo", "", "Todos los archivos (*.*)", options=options)
    return filename


button_style = '''QPushButton {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 12px 24px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 12px;
            margin: 1px 2px;
            cursor: pointer;
            border-radius: 8px;
			font-weight: bold;
        }
        QPushButton:hover {
            background-color: #45a049;
        }
        QPushButton:pressed {
            background-color: #367d39;
        }
        '''


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())



